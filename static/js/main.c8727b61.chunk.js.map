{"version":3,"sources":["data.js","theme.js","assets/Background1.png","components/common/WowHeading.js","components/common/WowText.js","components/common/NextSection.js","components/AreWeAlone.js","assets/Background2.png","components/DrakeEqExplain.js","helpers/formatNumber.js","helpers/getResult.js","components/Equation.js","components/TermCard.js","assets/Background3.png","components/WowEnd.js","App.js","reportWebVitals.js","index.js"],"names":["data","rstar","name","displayName","subscript","valueType","question","description","estimatedMin","estimatedMax","defaultValue","fp","ne","fl","fi","fc","L","theme","global","colors","brand","darkGray","lightGray","white","focus","border","color","outline","font","family","size","height","heading","level","1","rangeInput","thumb","WowHeading","content","Heading","margin","vertical","WowText","Text","weight","NextSection","to","Button","alignSelf","href","icon","FormDown","AreWeAlone","Box","align","background","background1","justify","DrakeEqExplain","id","background2","pad","Paragraph","textAlign","formatNumber","type","number","Math","round","pow","toLocaleString","getResult","values","result","forEach","value","key","StyledItalicText","styled","Equation","direction","fill","horizontal","style","position","top","zIndex","right","flex","Object","map","term","Anchor","label","width","get","left","StyledHeading","StyledQuestionText","StyledDescriptionText","TermCard","nextTerm","onValueChange","bottom","RangeInput","max","min","step","onChange","event","newValue","parseFloat","target","WowEnd","background3","App","defaultValuesMap","Map","useState","setValues","newValues","set","Grommet","full","ResponsiveContext","Consumer","index","keys","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c8727b61.chunk.js","sourcesContent":["const data = {\n  rstar: {\n    name: 'rstar',\n    displayName: 'R',\n    subscript: '*',\n    valueType: 'quantity',\n    question: 'How many stars form in our galaxy per year?',\n    description: 'Scientists estimate the number is between one and five. What do you think? Use the slider to pick a number!',\n    estimatedMin: 1,\n    estimatedMax: 5,\n    defaultValue: 3\n  },\n  fp: {\n    name: 'fp',\n    displayName: 'f',\n    subscript: 'p',\n    valueType: 'percentage',\n    question: 'What percentage of stars have planets in orbit around them?',\n    description: 'Scientists estimate the answer is between 40 and 100 percent. Slide your guess below!',\n    estimatedMin: 0.4,\n    estimatedMax: 1.0,\n    defaultValue: 0.7\n  },\n  ne: {\n    name: 'ne',\n    displayName: 'n',\n    subscript: 'e',\n    valueType: 'quantity',\n    question: 'On average, how many planets per planet-having star can support life?',\n    description: 'Estimates range from .01 to 4. You know what to do.',\n    estimatedMin: 0,\n    estimatedMax: 4,\n    defaultValue: 1\n  },\n  fl: {\n    name: 'fl',\n    displayName: 'f',\n    subscript: 'l',\n    valueType: 'percentage',\n    question: 'Of the planets that COULD support life, how many of them actually WILL develop life at some point?',\n    description: 'Zero percent? One hundred percent? Since we know of only one planet (Earth) that developed life (us! plus tigers, trees, etc.!), we can only guess how many others are out there.',\n    estimatedMin: 0.0,\n    estimatedMax: 1.0,\n    defaultValue: 0.5\n  },\n  fi: {\n    name: 'fi',\n    displayName: 'f',\n    subscript: 'i',\n    valueType: 'percentage',\n    question: 'On the planets that DO develop life, what percentage of them will develop intelligent life? Or at least intelligent enough to create a society and start wondering about aliens?',\n    description: 'None of them, all of them, or somewhere in between? Slide the slider to your answer!',\n    estimatedMin: 0.0,\n    estimatedMax: 1.0,\n    defaultValue: 0.5\n  },\n  fc: {\n    name: 'fc',\n    displayName: 'f',\n    subscript: 'c',\n    valueType: 'percentage',\n    question: 'What fraction of these \"intelligent\" societies will develop technology to send detectable signals into space?',\n    description: 'We\\'re all just guessing here, but let\\'s say it\\'s somewhere between 5 and 50 percent. You be the judge!',\n    estimatedMin: 0.05,\n    estimatedMax: 0.50,\n    defaultValue: 0.30\n  },\n  L: {\n    name: 'L',\n    displayName: 'L',\n    subscript: '',\n    valueType: 'log',\n    question: 'If there are aliens blasting signals into space, how many years do you think they\\'ll keep at it?',\n    description: 'The more years they spend sending out signals, the more time the rest of us have to detect them!',\n    estimatedMin: 0,\n    estimatedMax: 5,\n    defaultValue: 2.60\n  }\n}\n\nexport default data\n","const theme = {\n  global: {\n    colors: {\n      brand: '#ffce34',\n      darkGray: '#474c55',\n      lightGray: '#ddddda',\n      white: '#ffffff'\n    },\n    focus: {\n      border: {\n        color: 'lightGray'\n      },\n      outline: {\n        color: 'lightGray'\n      }\n    },\n    font: {\n      family: 'Montserrat',\n      size: '18px',\n      height: '20px'\n    }\n  },\n  heading: {\n    level: {\n      1: {\n        font: {\n          family: 'Oswald'\n        }\n      }\n    }\n  },\n  rangeInput: {\n    thumb: {\n      color: 'darkGray'\n    }\n  }\n}\n\nexport default theme\n","export default __webpack_public_path__ + \"static/media/Background1.6cff5f84.png\";","import {\n  Heading\n} from 'grommet'\n\nfunction WowHeading ({ content }) {\n  return (\n    <Heading\n      color='darkGray'\n      level={1}\n      margin={{ vertical: 'small' }}\n      size='large'\n    >\n      {content}\n    </Heading>\n  )\n}\n\nexport default WowHeading\n","import {\n  Text\n} from 'grommet'\n\nfunction WowText ({ content }) {\n  return (\n    <Text\n      color='darkGray'\n      margin='none'\n      size='xlarge'\n      weight='bold'\n    >\n      {content}\n    </Text>\n  )\n}\n\nexport default WowText\n","import {\n  Button\n} from 'grommet'\nimport { FormDown } from 'grommet-icons'\n\nfunction NextSection ({ to }) {\n  return (\n    <Button\n      alignSelf='center'\n      href={`#${to}`}\n      icon={<FormDown />}\n    />\n  )\n}\n\nexport default NextSection\n","import {\n  Box\n} from 'grommet'\n\nimport background1 from '../assets/Background1.png'\nimport WowHeading from './common/WowHeading'\nimport WowText from './common/WowText'\nimport NextSection from './common/NextSection'\n\nfunction AreWeAlone () {\n  return (\n    <Box\n      align='center'\n      background={`url(${background1})`}\n      height='100vh'\n      justify='center'\n    >\n      <WowHeading\n        content='ARE WE ALONE?'\n      />\n      <WowText\n        content='How many alien civilizations might be out there?'\n      />\n      <WowText\n        content='Use math to find out.'\n      />\n      <NextSection to='drakeEqExplain' />\n    </Box>\n  )\n}\n\nexport default AreWeAlone\n","export default __webpack_public_path__ + \"static/media/Background2.ef993c96.png\";","import {\n  Box,\n  Paragraph,\n  Text\n} from 'grommet'\n\nimport background2 from '../assets/Background2.png'\nimport NextSection from './common/NextSection'\n\nfunction DrakeEqExplain ({ size }) {\n  return (\n    <Box\n      id='drakeEqExplain'\n      align='center'\n      background={`url(${background2})`}\n      height='80vh'\n      justify='center'\n      pad='small'\n    >\n      <Paragraph\n        color='white'\n        textAlign={size === 'small' ? 'center' : 'start'}\n      >\n        <Text\n          color='brand'\n          weight='bold'\n        >\n          This is the Drake Equation.\n          {' '}\n        </Text>\n        <Text>\n          It might look a little complicated, but the idea is pretty simple: if we know how common certain things are in our galaxy, we can estimate how many alien civilizations might be out there. While we don't know for sure if our estimate is correct, the Drake Equation helps us think through all the factors that go into finding life beyond Earth. We'll still have to actually FIND aliens to know if we're right.\n        </Text>\n      </Paragraph>\n      <Paragraph\n        color='white'\n        textAlign={size === 'small' ? 'center' : 'start'}\n      >\n        Click or tap the squares below to learn about each variable and take your best guess. When you're done, we'll show you how many alien societies could be right here in the Milky Way, trying to communicate with you!\n      </Paragraph>\n      <NextSection to='rstar' />\n      <div id='rstar' />\n    </Box>\n  )\n}\n\nexport default DrakeEqExplain\n","function formatNumber (type, number) {\n  if (type === 'log') {\n    return Math.round(Math.pow(10, number)).toLocaleString()\n  }\n\n  if (type === 'percentage') {\n    return `${Math.round(number * 100)}%`\n  }\n\n  return number.toLocaleString()\n}\n\nexport default formatNumber\n","function getResult (values) {\n  let result = 1\n  values.forEach((value, key) => {\n    if (key === 'L') {\n      result *= Math.pow(10, value)\n    } else {\n      result *= value\n    }\n  })\n  return result\n}\n\nexport default getResult\n","import {\n  Anchor,\n  Box,\n  Text\n} from 'grommet'\nimport styled from 'styled-components'\n\nimport data from '../data'\nimport formatNumber from '../helpers/formatNumber'\nimport getResult from '../helpers/getResult'\n\nconst StyledItalicText = styled(Text)`\n  font-style: italic;\n`\n\nfunction Equation ({ values }) {\n  const result = getResult(values)\n\n  return (\n    <Box\n      align='center'\n      background='lightGray'\n      direction='row'\n      fill='horizontal'\n      height='20vh'\n      justify='stretch'\n      pad={{ horizontal: 'large' }}\n      style={{\n        position: 'sticky',\n        top: '0px',\n        zIndex: 1\n      }}\n    >\n      <StyledItalicText\n        color='darkGray'\n        margin={{ right: 'medium' }}\n        weight='bold'\n      >\n        alieNs =\n      </StyledItalicText>\n      <Box\n        flex\n        direction='row'\n        justify='between'\n      >\n        {Object.values(data).map(term => (\n          <Box\n            key={term.name}\n            align='center'\n            direction='column'\n          >\n            <Anchor\n              href={`#${term.name}`}\n              label={\n                <Box\n                  align='center'\n                  background='darkGray'\n                  height='50px'\n                  justify='center'\n                  round='small'\n                  width='50px'\n                >\n                  <StyledItalicText\n                    color='white'\n                    weight='bold'\n                  >\n                    {term.displayName}\n                    <sub>\n                      {term.subscript}\n                    </sub>\n                  </StyledItalicText>\n                </Box>\n              }\n            />\n            <Text\n              weight='bold'\n            >\n              {formatNumber(term.valueType, values.get(term.name))}\n            </Text>\n          </Box>\n        ))}\n      </Box>\n      <StyledItalicText\n        color='darkGray'\n        margin={{ left: 'medium' }}\n        weight='bold'\n      >\n         = {Math.round(result).toLocaleString()}\n      </StyledItalicText>\n    </Box>\n  )\n}\n\nexport default Equation\n","import {\n  Box,\n  Heading,\n  RangeInput,\n  Text\n} from 'grommet'\nimport styled from 'styled-components'\n\nimport formatNumber from '../helpers/formatNumber'\nimport NextSection from './common/NextSection'\n\nconst StyledHeading = styled(Heading)`\n  font-style: italic;\n`\n\nconst StyledQuestionText = styled(Text)`\n  font-style: italic;\n`\n\nconst StyledDescriptionText = styled(Text)`\n  font-style: italic;\n`\n\nfunction TermCard ({\n  description,\n  displayName,\n  estimatedMax,\n  estimatedMin,\n  name,\n  nextTerm,\n  onValueChange,\n  question,\n  subscript,\n  value,\n  valueType\n}) {\n  const onChange = (event) => {\n    const newValue = parseFloat(event.target.value)\n\n    onValueChange(name, newValue)\n  }\n\n  return (\n    <Box\n      key={name}\n      align='center'\n      background='white'\n      height='80vh'\n      justify='center'\n      pad='large'\n    >\n      <Box\n        background='brand'\n        fill\n        round='large'\n        pad='large'\n      >\n        <StyledHeading\n          color='darkGray'\n          level={2}\n          margin='none'\n          size='large'\n        >\n          {displayName}\n          <sub>\n            {subscript}\n          </sub>\n        </StyledHeading>\n        <StyledQuestionText\n          color='darkGray'\n          margin='none'\n          weight='bold'\n        >\n          {question}\n        </StyledQuestionText>\n        <br />\n        <StyledDescriptionText\n          color='darkGray'\n          margin={{ bottom: 'large' }}\n        >\n          {description}\n        </StyledDescriptionText>\n        <RangeInput\n          max={estimatedMax}\n          min={estimatedMin}\n          step={(valueType === 'quantity') ? 1 : 0.01}\n          value={value}\n          onChange={onChange}\n        />\n        <Box\n          direction='row'\n          fill='horizontal'\n          justify='between'\n          margin={{ top: 'small' }}\n        >\n          <Text\n            color='darkGray'\n            size='large'\n            weight='bold'\n          >\n            {formatNumber(valueType, estimatedMin)}\n          </Text>\n          <Text\n            color='darkGray'\n            size='large'\n            weight='bold'\n          >\n            {formatNumber(valueType, estimatedMax)}\n          </Text>\n        </Box>\n        <NextSection to={nextTerm || 'wowEnd'} />\n        <div id={nextTerm} />\n      </Box>\n    </Box>\n  )\n}\n\nexport default TermCard\n","export default __webpack_public_path__ + \"static/media/Background3.57b197ef.png\";","import {\n  Box\n} from 'grommet'\n\nimport background3 from '../assets/Background3.png'\nimport getResult from '../helpers/getResult'\nimport WowHeading from './common/WowHeading'\nimport WowText from './common/WowText'\n\nfunction WowEnd ({ values }) {\n  const result = getResult(values)\n\n  return (\n    <Box\n      id='wowEnd'\n      align='center'\n      background={`url(${background3})`}\n      height='80vh'\n      justify='center'\n      pad='small'\n    >\n      <WowHeading\n        content='WOW!'\n      />\n      <WowText\n        content='If your guesses turn out to be right, there are'\n      />\n      <WowHeading\n        content={Math.round(result).toLocaleString()}\n      />\n      <WowText\n        content='alien civilizations in our galaxy who are trying to get your attention!'\n      />\n    </Box>\n  )\n}\n\nexport default WowEnd\n","import { useState } from 'react'\nimport {\n  Box,\n  Grommet,\n  ResponsiveContext\n} from 'grommet'\n\nimport data from './data'\nimport theme from './theme'\n\nimport AreWeAlone from './components/AreWeAlone'\nimport DrakeEqExplain from './components/DrakeEqExplain'\nimport Equation from './components/Equation'\nimport TermCard from './components/TermCard'\nimport WowEnd from './components/WowEnd'\n\nconst App = () => {\n  const defaultValuesMap = new Map([\n    ['rstar', data.rstar.defaultValue],\n    ['fp', data.fp.defaultValue],\n    ['ne', data.ne.defaultValue],\n    ['fl', data.fl.defaultValue],\n    ['fi', data.fi.defaultValue],\n    ['fc', data.fc.defaultValue],\n    ['L', data.L.defaultValue]\n  ])\n\n  const [values, setValues] = useState(defaultValuesMap)\n\n  const onValueChange = (name, value) => {\n    const newValues = new Map(values)\n    newValues.set(name, value)\n    setValues(newValues)\n  }\n\n  return (\n    <Grommet theme={theme} full>\n      <ResponsiveContext.Consumer>\n        {size => (\n          <Box fill>\n            <Box flex='grow'>\n              <AreWeAlone />\n              <DrakeEqExplain\n                size={size}\n              />\n              <Equation\n                values={values}\n              />\n              {Object.values(data).map((term, index) => (\n                <TermCard\n                  key={term.name}\n                  nextTerm={Object.keys(data)[index + 1]}\n                  onValueChange={onValueChange}\n                  value={values.get(term.name)}\n                  {...term}\n                />\n              ))}\n              <WowEnd\n                values={values}\n              />\n            </Box>\n          </Box>\n        )}\n      </ResponsiveContext.Consumer>\n    </Grommet>\n  )\n}\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}